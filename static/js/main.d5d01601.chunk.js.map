{"version":3,"sources":["Cell.js","fillArray.js","findSurroundingCells.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFlip","bind","assertThisInitialized","flipCells","row","value","react_default","a","createElement","className","concat","isLit","onClick","Component","fillArray","limit","num","arr","litStatus","i","j","push","Math","floor","random","getCell","matrix","y","x","undefined","e","Board","state","cellArr","numOfRows","isWinner","shuffleCells","index","cArr","surroundingCells","curr","up","down","left","right","findSurroundingCells","prop","length","setState","every","cell","newCellArr","_this2","boardStyle","display","gridTemplateColumns","gridGap","margin","boxShadow","borderRadius","overflow","style","map","src_Cell_0","key","indexOf","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5d01601.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Cell.css'\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props)\n\n    this.handleFlip = this.handleFlip.bind(this)\n  }\n\n  handleFlip() {\n    this.props.flipCells([this.props.row, this.props.value])\n  }\n\n  render() {\n    return (\n      <div\n        className={`Cell ${this.props.isLit ? 'Cell-lit' : ''}`}\n        onClick={this.handleFlip}\n      ></div>\n    )\n  }\n}\n\nexport default Cell\n","function fillArray(limit) {\r\n  let num = 1\r\n\r\n  let arr = []\r\n\r\n  let litStatus = [true, false]\r\n\r\n  for (let i = 0; i < limit; i++) {\r\n    arr[i] = []\r\n\r\n    for (let j = 0; j < limit; j++) {\r\n      arr[i].push({\r\n        value: num++,\r\n        isLit: litStatus[Math.floor(Math.random() * 2)]\r\n      })\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nexport { fillArray }\r\n","function findSurroundingCells(matrix, y, x) {\r\n  return {\r\n    curr: matrix[y][x],\r\n    up: getCell(matrix, y - 1, x),\r\n    down: getCell(matrix, y + 1, x),\r\n    left: getCell(matrix, y, x - 1),\r\n    right: getCell(matrix, y, x + 1)\r\n  }\r\n}\r\n\r\nfunction getCell(matrix, y, x) {\r\n  let value = undefined,\r\n    hasValue = undefined\r\n\r\n  try {\r\n    hasValue = matrix[y][x] !== undefined\r\n    value = hasValue ? matrix[y][x] : null\r\n  } catch (e) {\r\n    value = null\r\n  }\r\n\r\n  return value\r\n}\r\n\r\nexport { findSurroundingCells }\r\n","import React, { Component } from 'react'\nimport Cell from './Cell'\nimport './Board.css'\nimport { fillArray } from './fillArray'\nimport { findSurroundingCells } from './findSurroundingCells'\n\nclass Board extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      cellArr: fillArray(this.props.numOfRows), // Fill a 2D array with random litStatus cells\n      isWinner: false\n    }\n\n    this.flipCells = this.flipCells.bind(this)\n    this.shuffleCells = this.shuffleCells.bind(this)\n  }\n\n  flipCells(index) {\n    let y = index[0],\n      x = index[1]\n\n    let cArr = this.state.cellArr\n    let surroundingCells = findSurroundingCells(cArr, y, x) // Get the values of surr cells\n\n    for (let prop in surroundingCells) {\n      if (!surroundingCells[prop]) delete surroundingCells[prop] // delete null properties\n    }\n\n    for (let i = 0; i < cArr.length; i++) {\n      for (let j = 0; j < cArr[i].length; j++) {\n        for (let prop in surroundingCells) {\n          if (cArr[i][j] === surroundingCells[prop])\n            cArr[i][j].isLit = !cArr[i][j].isLit // Flip cells\n        }\n      }\n    }\n\n    this.setState({\n      cellArr: cArr,\n      isWinner: cArr.every((row) => row.every((cell) => !cell.isLit)) // check if all cells are flipped to OFF state\n    })\n  }\n\n  shuffleCells() {\n    let newCellArr = fillArray(this.props.numOfRows) // reassign 2d array with random values\n\n    this.setState({\n      cellArr: newCellArr,\n      isWinner: false\n    })\n  }\n\n  render() {\n    let cellArr = this.state.cellArr\n\n    let boardStyle = {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${this.props.numOfRows}, 1fr)`,\n      gridGap: '0.5rem',\n      margin: '5rem 0 2rem',\n      boxShadow: `0 0 .3rem 0.1rem #fff,  \n      0 0 .1rem .1rem #A997DF, \n      0 0 .3rem .1rem #0ff`,\n      borderRadius: '5px',\n      overflow: 'hidden'\n    }\n\n    if (this.state.isWinner) {\n      return (\n        <div>\n          <h1 className='container'>\n            <span className='neon'>You</span>\n            <span className='flux'>Win</span>\n          </h1>\n          <button onClick={this.shuffleCells} className='shuffle'>\n            Shuffle All\n          </button>\n        </div>\n      )\n    }\n\n    return (\n      <div className='box'>\n        <h1 className='container'>\n          <span className='neon-small'>Lights</span>\n          <span className='flux-small'>Out</span>\n        </h1>\n        <div style={boardStyle}>\n          {cellArr.map((row) =>\n            row.map((cell) => (\n              <Cell\n                key={cell.value}\n                row={cellArr.indexOf(row)}\n                value={row.indexOf(cell)}\n                flipCells={this.flipCells}\n                isLit={cell.isLit}\n              />\n            ))\n          )}\n        </div>\n        <button onClick={this.shuffleCells} className='shuffle'>\n          Shuffle All\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Board\n","import React, { Component } from 'react'\nimport './App.css'\nimport Board from './Board'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board numOfRows={5} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}